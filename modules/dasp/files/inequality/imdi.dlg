/*************************************************************************/
/* DASP  : Distributive Analysis Stata Package  (version 2.2)            */
/*************************************************************************/
/* Conceived and programmed by Dr. Araar Abdelkrim   (2006-2012)          */
/* Universite Laval, Quebec, Canada                                      */
/* email : aabd@ecn.ulaval.ca                                            */
/* Phone : 1 418 656 7507                                                */
/*************************************************************************/
/*   imdi.dlg                                                            */
/*************************************************************************/

VERSION 9.2



INCLUDE graph_header
POSITION . . 760 420


DIALOG main, label("DASP| Multidimensional inequality indices (Araar 2009) --> imdi command") tabtitle("Main")
BEGIN
  DEFINE col0  20
  DEFINE col1 120
  DEFINE col2 210
  DEFINE col3 330
  DEFINE col4 450
  DEFINE col5 570
  
  DEFINE colwd0 55
  DEFINE colwd1 100

  DEFINE _x _xsetbu
  DEFINE _y _top

  
  TEXT     tx_var2      20    30    80      .,                 ///
           label("Size  variable:   ")  
  VARNAME  vn_hhs      110    @     250      .,                 ///
           option(hsize)      
 
  TEXT     tx_var4      20    +25    80      .,                 ///
           label("Group  variable:   ") 
  VARNAME  vn_hhg      110    @     250      .,                 ///
           option(hgroup)   

  GROUPBOX chk_per  390    10  360 100,                         ///
             label("Options")         ///
    
   
    TEXT     tx_dims 400      +20      120       .,           ///
          label("Number of dimensions:") 
          
 COMBOBOX cb_dims 530          @       210       .,        ///
          contents(dim_contents)                                ///
          values(dim_values)                                    ///
          onselchangelist(dim_change) default(1)                          ///
          dropdownlist option(nbsec)  
   
   TEXT       txt_op2     400    +25    120      .,                 ///  
             label("MDI index:   ")

    COMBOBOX  cb_abs      530    @     210      .,                  ///
            dropdownlist                                          ///
            contents(cb_abs)  values(cb_abs_val) option(type)     ///
            default(rel) 
	 TEXT       txt_op3     400    +25    120      .,                 ///  
             label("Dimenssional weights:   ")		
			
    COMBOBOX  cb_we      530    @     210      .,                  ///
            dropdownlist                                          ///
            contents(cb_we)  values(cb_we_val) option(ishare)     ///
            default(no)
           

   
  TEXT     tx_fr col2         +70      100    .,           ///
          label("Variable(s) of interest")
  
 
 
  TEXT     tx_in1     col3      @         120         .,           ///
        label("Parameter(s): lambda_j")
 
  

  
      
  TEXT     tx_dim1 col1      +20       60    .,           ///
        label("Dimension_1") right
  
  
  VARNAME  vn_dim1    col2     @         colwd1    .,           ///
        label("")      
        


  EDIT  en_l1      col3      @         @         .,           ///
        option(lam1)         default(0.5)                                    ///
        label("")  

 
   
   
  TEXT  tx_dim2    col1      +30       60    .,           ///
        label("Dimension_2") right
  
   VARNAME  vn_dim2    col2     @         colwd1    .,           ///
        label("")      
        


  EDIT  en_l2      col3      @         @         .,           ///
        option(lam2)         default(0.5)                                    ///
        label("")  


            
        
		
		
    

   
  TEXT  tx_dim3    col1      +30       60    .,           ///
        label("Dimension_3") right
  
   VARNAME  vn_dim3    col2     @         colwd1    .,           ///
        label("")      
        


  EDIT  en_l3      col3      @         @         .,           ///
        option(lam3)         default(0.5)                                    ///
        label("")  



		
		
		
		
		  TEXT  tx_dim4    col1      +30       60    .,           ///
        label("Dimension_4") right
  
   VARNAME  vn_dim4    col2     @         colwd1    .,           ///
        label("")      
        


  EDIT  en_l4      col3      @         @         .,           ///
        option(lam4)         default(0.5)                                    ///
        label("")  


		
		
		  TEXT  tx_dim5    col1      +30       60    .,           ///
        label("Dimension_5") right
  
   VARNAME  vn_dim5    col2     @         colwd1    .,           ///
        label("")      
        


  EDIT  en_l5      col3      @         @         .,           ///
        option(lam5)         default(0.5)                                    ///
        label("")  


		
		
		
		  TEXT  tx_dim6    col1      +30       60    .,           ///
        label("Dimension_6") right
  
   VARNAME  vn_dim6    col2     @         colwd1    .,           ///
        label("")      
        


  EDIT  en_l6      col3      @         @         .,           ///
        option(lam6)         default(0.5)                                    ///
        label("")  

 
		
		
        
   DEFINE _x 600
   DEFINE _y 280
     
  INCLUDE _bu_svyset

END



LIST cb_abs
BEGIN
  Relative
  Absolute
  
END

LIST cb_abs_val
BEGIN
  rel
  abs
END


LIST cb_we
BEGIN
  Uniform weight
  Weight by the dimensionnal averages
  
END

LIST cb_we_val
BEGIN
  no
  yes
END


SCRIPT clear_all
BEGIN
        main.cb_dims.setvalue "1"
        main.vn_dim1.setvalue ""
        main.vn_dim2.setvalue ""
        main.vn_dim3.setvalue ""
        main.vn_dim4.setvalue ""
        main.vn_dim5.setvalue ""
        main.vn_dim6.setvalue ""  
END


SCRIPT PREINIT
BEGIN
       
        create BOOLEAN has_frequen
        
        create BOOLEAN has_dim1
        create BOOLEAN has_dim2
        create BOOLEAN has_dim3
        create BOOLEAN has_dim4
        create BOOLEAN has_dim5
        create BOOLEAN has_dim6

END




LIST dim_contents
BEGIN
        1
        2
        3
        4
        5
        6
END




LIST dim_change
BEGIN
        script dim1
        script dim2
        script dim3
        script dim4
        script dim5
        script dim6
END

SCRIPT dim1
BEGIN
        has_dim1.settrue
        has_dim2.setfalse
        has_dim3.setfalse
        has_dim4.setfalse
        has_dim5.setfalse
        has_dim6.setfalse
        program check_dims
END

SCRIPT dim2
BEGIN
        has_dim1.settrue
        has_dim2.settrue
        has_dim3.setfalse
        has_dim4.setfalse
        has_dim5.setfalse
        has_dim6.setfalse
        program check_dims
END

SCRIPT dim3
BEGIN
        has_dim1.settrue
        has_dim2.settrue
        has_dim3.settrue
        has_dim4.setfalse
        has_dim5.setfalse
        has_dim6.setfalse
        program check_dims
END

SCRIPT dim4
BEGIN
        has_dim1.settrue
        has_dim2.settrue
        has_dim3.settrue
        has_dim4.settrue
        has_dim5.setfalse
        has_dim6.setfalse
        program check_dims
END

SCRIPT dim5
BEGIN
        has_dim1.settrue
        has_dim2.settrue
        has_dim3.settrue
        has_dim4.settrue
        has_dim5.settrue
        has_dim6.setfalse
        program check_dims
END

SCRIPT dim6
BEGIN
        has_dim1.settrue
        has_dim2.settrue
        has_dim3.settrue
        has_dim4.settrue
        has_dim5.settrue
        has_dim6.settrue
        program check_dims
END



PROGRAM check_dims
BEGIN
        if has_dim1 {
                call main.en_l1.show
                call main.vn_dim1.show
		 
                  
               
        }

        if !has_dim1 {
                call main.tx_dim1.show
                call main.en_l1.hide
                call main.vn_dim1.hide
		     
        }
        if has_dim2 {
                call main.tx_dim2.show
                call main.en_l2.show
                call main.vn_dim2.show
		       
        }
        if !has_dim2 {
                call main.tx_dim2.hide
                call main.en_l2.hide
                call main.vn_dim2.hide
		        
        }
        if has_dim3 {
                call main.tx_dim3.show
                call main.en_l3.show
                call main.vn_dim3.show
		        

        }
        if !has_dim3 {
                call main.tx_dim3.hide
                call main.en_l3.hide
                call main.vn_dim3.hide
		       
        }
        if has_dim4 {
                call main.tx_dim4.show
                call main.en_l4.show
                call main.vn_dim4.show
		       

        }
        if !has_dim4 {
                call main.tx_dim4.hide
                call main.en_l4.hide
                call main.vn_dim4.hide
		      
  
        }
        if has_dim5 {
                call main.tx_dim5.show
                call main.en_l5.show
                call main.vn_dim5.show
		      
     
        }
        if !has_dim5 {
                call main.tx_dim5.hide
                call main.en_l5.hide
                call main.vn_dim5.hide
	         	
 
        }
        if has_dim6 {
                call main.tx_dim6.show
                call main.en_l6.show
                call main.vn_dim6.show
		       

        }
        if !has_dim6 {
                call main.tx_dim6.hide
                call main.en_l6.hide
                call main.vn_dim6.hide
	         
        }

        

       
END



PROGRAM dim1_output
BEGIN
 if has_dim1 {
                        	
		    	
         	     optionarg main.en_l1
}
END



PROGRAM dim2_output
BEGIN
        if has_dim2 {
                          
          
		     
         	     optionarg main.en_l2
        }
END

PROGRAM dim3_output
BEGIN
        if has_dim3 {
	                       

                  
         	     optionarg main.en_l3
        }
END

PROGRAM dim4_output
BEGIN
        if has_dim4 {
	                      
     
		    
         	     optionarg main.en_l4
        }
END

PROGRAM dim5_output
BEGIN
       if has_dim5 {
                    	          
       
		    
         	     optionarg main.en_l5
        }
END

PROGRAM dim6_output
BEGIN
       if has_dim6 {
                             

		   
         	     optionarg main.en_l6
        }
END





LIST cb_ci
BEGIN
  Two-sided
  Lower-bounded
  Upper-bounded
END


LIST cb_ci_val
BEGIN
  ts
  lb
  ub
END



DIALOG resop,  tabtitle("Results")

BEGIN
					
SPINNER  sp_dec    10       25      50	  .,		        /*
   		*/ label("Decimals")				/*
   		*/ min(0) default(6) max(12)				/*
  		*/ option(dec)

TEXT     sp_txt  70      25      100	  .,		                /*
   		*/ label("Number of decimals")	
   		


END

HELP hlp1,   view("help imdi")
RESET res1
OK ok1,      label("OK")
CANCEL can1, label("Cancel")
SUBMIT sub1, label("Submit")
COPY copy1

PROGRAM command
BEGIN
        put "imdi "
        
        if has_dim1 {
        require main.vn_dim1
        varlist [main.vn_dim1]
        }
     
        if has_dim2 {
        require main.vn_dim2
        varlist [main.vn_dim2]
        }
        if has_dim3 {
        require main.vn_dim3
        varlist [main.vn_dim3]
        }
        if has_dim4 {
        require main.vn_dim4
        varlist [main.vn_dim4]
        }
        if has_dim5 {
        require main.vn_dim5
        varlist [main.vn_dim5]
        }
        if has_dim6 {
        require main.vn_dim6
        varlist [main.vn_dim6]
        }
        
        beginoptions
       
        optionarg main.vn_hhs
        optionarg main.vn_hhg
   
	   if !main.cb_abs.isdefault() {
                        optionarg main.cb_abs
                        }

				                  
        put " " /program dim1_output
        put " " /program dim2_output
        put " " /program dim3_output
	put " " /program dim4_output
	put " " /program dim5_output
        put " " /program dim6_output

			if !resop.sp_dec.isdefault() {
			optionarg resop.sp_dec
			}
			

        endoptions 
        
        
END
